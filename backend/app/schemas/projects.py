# C:\Users\Faith\Downloads\myits-collab\backend\app\schemas\projects.py

from __future__ import annotations # <--- ADD THIS AT THE VERY TOP

from pydantic import BaseModel, Field # HttpUrl if you use it directly in schemas
from datetime import datetime
from typing import Optional, List

# Import all necessary schemas at the top
# Even if they cause a temporary circular import warning (which `__future__` helps with)
# We will explicitly import related schema classes for nesting.
from app.schemas.user import AdminResponse, DosenResponse, MahasiswaResponse
from app.schemas.applications import ApplicationResponse # If you plan to list applicants here

# Bidang Schemas (already defined correctly)
class BidangBase(BaseModel):
    id_bidang: str = Field(..., max_length=4, alias="ID_Bidang") # Added ID_Bidang here for response
    nama_bidang: str = Field(..., max_length=100, alias="Nama_Bidang")

class BidangCreate(BidangBase):
    pass # ID_Bidang usually passed for creation

class BidangResponse(BidangBase):
    class Config:
        from_attributes = True
        populate_by_name = True

# Project Schemas (ProyekBase, ProyekCreate, ProyekUpdate are fine)
class ProyekBase(BaseModel):
    judul: str = Field(..., max_length=255, alias="Judul")
    deskripsi: str = Field(..., alias="Deskripsi")
    bidang: str = Field(..., max_length=500, alias="Bidang")
    # jumlah_peserta: int = Field(..., alias="Jumlah_Peserta")
    # status_proyek: str = Field(..., max_length=20, alias="Status_Proyek")
    availability: bool = Field(..., alias="Availability")    

class ProyekCreate(ProyekBase):
    # bidang_id: str = Field(..., max_length=4, alias="Bidang_ID_Bidang")
    # For creation, ID_Proyek will likely be generated by backend
    # If frontend sends it, add: id_proyek: str = Field(..., max_length=4, alias="ID_Proyek")
    
    # Fields required for creating a project that are NOT NULL in DB
    # but might not be part of the automatic Pydantic model unpacking
    # (e.g., if they are passed as separate arguments or from the current user).
    
    tgl_mulai: datetime = Field(None, alias="Tgl_Mulai")
    tgl_selesai: datetime = Field(None, alias="Tgl_Selesai")
    jumlah_peserta: Optional[int] = Field(None, alias="Jumlah_Peserta")
    status_proyek: Optional[str] = Field(None, max_length=20, alias="Status_Proyek")
    dosen_nip: Optional[str] = Field(None, max_length=18, alias="Dosen_NIP")
    
    pass

class ProyekUpdate(ProyekBase):
    judul: Optional[str] = Field(None, max_length=255, alias="Judul")
    deskripsi: Optional[str] = Field(None, alias="Deskripsi")
    bidang: Optional[str] = Field(None, max_length=500, alias="Bidang")
    jumlah_peserta: Optional[int] = Field(None, alias="Jumlah_Peserta")
    status_proyek: Optional[str] = Field(None, max_length=20, alias="Status_Proyek")
    availability: Optional[bool] = Field(None, alias="Availability")
    tgl_mulai: Optional[datetime] = Field(None, alias="Tgl_Mulai")
    tgl_selesai: Optional[datetime] = Field(None, alias="Tgl_Selesai")
    dosen_nip: Optional[str] = Field(None, max_length=18, alias="Dosen_NIP")


class ProyekResponse(ProyekBase):
    # id_proyek: str = Field(..., alias="ID_Proyek")
    # judul: str = Field(..., alias="Judul")
    # deskripsi: Optional[str] = Field(None, alias="Deskripsi")
    # availability: bool = Field(..., alias="Availability")
    # nama_bidang: str = Field(..., alias="Nama_Bidang") # For output, reflects the database column
    # tgl_upload: datetime = Field(..., alias="Tgl_Upload")
    # # admin_id: Optional[str] = Field(None, alias="Admin_ID_Admin")
    # dosen_nip: Optional[str] = Field(None, alias="Dosen_NIP")     # <--- CHANGE TO Optional[str] and Field(None, ...)
    
    id_proyek: str = Field(..., max_length=4, alias="ID_Proyek")
    tgl_upload: datetime = Field(..., alias="Tgl_Upload")
    tgl_mulai: datetime = Field(..., alias="Tgl_Mulai") # Still required in response
    tgl_selesai: datetime = Field(..., alias="Tgl_Selesai") # Still required in response
    jumlah_peserta: int = Field(..., alias="Jumlah_Peserta") # Still required in response
    status_proyek: str = Field(..., alias="Status_Proyek") # Still required in response
    dosen_nip: Optional[str] = Field(None, alias="Dosen_NIP")

    class Config:
        from_attributes = True # Enable ORM mode for Pydantic v2+
        populate_by_name = True # Allows mapping by field name (e.g., 'judul') or alias (e.g., 'Judul')


# ProyekDetailResponse - THE FIX IS HERE!
class ProyekDetailResponse(ProyekResponse):
    # Correct way to annotate nested schemas, especially with 'Optional' or 'List'
    # No direct assignment of the class itself
    # admin: Optional[AdminResponse] = None # AdminResponse is now imported at the top
    admins: List[AdminResponse] = []
    dosen: Optional[DosenResponse] = None # DosenResponse is now imported at the top

    # If you want to include applicants, use string literal for forward reference
    # and ensure ApplicationResponse is imported at the top of this file
    applicants: List['ApplicationResponse'] = [] # Use string literal for type if it causes circular import

    class Config:
        from_attributes = True
        populate_by_name = True